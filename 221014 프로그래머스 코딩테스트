
///////////////////////////////
// 나머지 구하기
// 정수 num1, num2가 매개변수로 주어질 때, num1를 num2로 나눈 나머지를 return 하도록 solution 함수를 완성해주세요.
///////////////////////////////
class Solution {
    public int solution(int num1, int num2) {
        
        return num1%num2;
    }
}

//////////////////////////////////
//  분수의 덧셈
// 첫 번째 분수의 분자와 분모를 뜻하는 denum1, num1, 두 번째 분수의 분자와 분모를 뜻하는 denum2, num2가 매개변수로 주어집니다. 두 분수를 더한 값을 기약 분수로 나타냈을 때 분자와 분모를 순서대로 담은 배열을 return 하도록 solution 함수를 완성해보세요.
//////////////////////////////////
int lcm(int a, int b);
int gcd(int a, int b);

int* solution(int denum1, int num1, int denum2, int num2) {
    int *arr, tmp;
  arr = (int*)malloc(sizeof(int) * 2);
   arr[1] = lcm(num1, num2);
   arr[0] = denum1 * (arr[1] / num1) + denum2 * (arr[1] / num2);
   tmp = gcd(arr[1], arr[0]);
   arr[0] /= tmp;
   arr[1] /= tmp;

   return arr;
}


int gcd(int a, int b)
{
   if (a == 0) return b;
   return gcd(b % a, a);
}

int lcm(int a, int b)
{
   return (a * b) / gcd(a, b);
}


// 오답:
class Solution {
    public int[] solution(int denum1, int num1, int denum2, int num2) {

      int bunja = num1 * denum2 + num2 * denum1;
      int bunmo =  num1 * num2;
      int maximum = 1;
        
      for(int i = 1 ; i <= bunja ; i ++) {
        if(bunja%i == 0 && bunmo%i == 0) {
            maximum = i;
        }
    } return [bunja/maximum, bunmo/maximum];
}
