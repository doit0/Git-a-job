<%@ page language="java" contentType="text/html; charset=UTF-8"
    pageEncoding="UTF-8"   import="java.util.*"%>


<!--JSP 페이지에서 사용할 [사용자 정의 태그]의 한 종류인 [JSTL의 C 코어 태그]를 사용하겠다고 선언-->
<%@taglib prefix="c" uri="http://java.sun.com/jsp/jstl/core" %>


    
<!DOCTYPE html>
<html>
<head>
<meta charset="UTF-8">



<!-- JQuery 라이브러리 수입하기 -->
<script src = "/js/jquery-1.11.0.min.js"></script>
<script>
		// body 태그를 모두 읽어들인 후 실행할 자스 코딩 설정하기
		$(function(){
			// 새글 쓰기 버튼을 클릭하면 웹서버에 "/boardRegForm.do"
		 $(".newRegBtn").bind("click",function(){
				// location.replace("/boardRegForm.do" );				
		 
				
				// name=boardRegForm 을 가진 form 태그의 action 값 설정하기
				document.boardRegForm.action="/boardRegForm.do" ;

				// name=boardRegForm 을 가진 form 태그의 method 값 설정하기
				document.boardRegForm.method="post" ;
				
				// name=boardRegForm 을 가진 form 태그의 action 값 해당한 URL 주소로 웹서버 접속하기
		 		document.boardRegForm.submit();
				
				
		
		 	})
			
		
		//--------------------------------------------------------
		// 검색결과물이 출력되는 table 태그의 tr태그 [MouseOn] 과 [MouseOut] 했을 때 배경색 바꾸기 				/// 이벤트설정. (JQuery 사용 예정)
		//--------------------------------------------------------	
		//  < 방법 1 >
		$(".searchingResults").find("tr:eq(0)").nextAll().hover(		/// 첫번째 tr 을 뺀 나머지 모두를 잡는 방법 (nextAll)
																		/// 	$(".searchingResults").find("tr:eq(0)").siblings()    과 같은 태그
				
					// 마우스온(= 마우스를 갖다 댔을 때) 했을 때 실행할 자스 코드 (배경색 바꾸기) 설정.
						function(){					
							
							// 마우스를 댄 태그에 class="mouseOnTrBgC" 삽입하기
							$(this).addClass("mouseOnTrBgC");				/// JQuery 의 메소드 addClass 를 통해서 해당 선택자에 클래스값 추가해준다.
																			/// 클래스값이 들어가는 순간 CSS 를 부여한 다음 removeClass 하는 순간 CSS 가 사라진다.
						}
				
					// 마우스아웃(=마우스를 떼었을 때) 했을 때 실행할 자스 코드 (원래의 배경색으로 바꾸기) 설정.	
						, function(i){				
	
							// 마우스를 뺀 태그에 class="mouseOnTrBgC" 삭제하기
							$(this).removeClass("mouseOnTrBgC");				/// JQuery 의 메소드 addClass 를 통해서 해당 선택자에 클래스값 삭제해준다.
							
						});			
				
				
				
	/*		
		
		//  < 방법 2 >		
		var old_bgcolor ;							// 전역변수 old_bgcolor에 원래의 bgcolor 값 구해놓기. (나중에 원래의 배경색으로 바꾸기 위해)

		$(".searchingResults").find("tr:eq(0)").nextAll().hover(		/// 첫번째 tr 을 뺀 나머지 모두를 잡는 방법 (nextAll)
																		/// 	$(".searchingResults").find("tr:eq(0)").siblings()    과 같은 태그
		
				function(){					// 마우스온 했을 때 배경색 바꾸기.
					
					 old_bgcolor = $(this).attr( "bgcolor" );
					 $(this).attr({"bgcolor":"FFD8D8"  });
				}
		
				, function(i){				// 마우스아웃 했을 때 원래의 배경색으로 바꾸기.
					$(this).attr( "old_bgcolor" );

				})	
				 
		//   < 방법 3 >
		$(".seachingResults").find("tr:eq(0)").nextAll().hover(
				function(){
					 $(this).attr({"bgcolor":"FFD8D8"  })			/// JQuery에서 this란? 이벤트가 발생했을 때의 선택자. (특정 이벤트 관련으로 메소드 호출시 실행되는 익명함수 안에서 사용되는 선택자. 특정 이벤트 발생시 선택자.)
				}
				,function(i){
				
					 	var basic_bgcolor = $(this).attr( "basic_bgcolor" );		///  tr 태그 안에 basic_bgcolor 와 같은 해당 속성명이 있어야함.
						$(this).attr({"bgcolor": basic_bgcolor  })	
				});
		
		*/
		 
		 /// 검색화면에 있는 검색 조건에 있는 것들이 들어가야하니까 post 방식을 사용해야함.
				
		 /// 검색화면에 있는 검색 조건에 있는 것		
		var formObj = $(".boardSearchForm");
			
		formObj.find(".keyword1").val("${param.keyword1}");
		formObj.find(".keyword2").val("${param.keyword2}");
		
		<c:if test="${!empty param.or_And}">										/// 비어있지 않을 때만 파라미터 값을 넣어줘~ 라는 의미
			formObj.find(".or_And").val("${param.or_And}");		 		///  select  의 경우 로그인해서 들어갔을 때는 ($){param.or_And} 의 값이 없음. 결국 길이가 없는 select를 선택하게 됨. (디폴트로 or 가 선택될 수 있게 c코어 태그로 EL 만들어주기)
		</c:if>
			
		<c:if test="${!empty param.rowCntPerPage}">										
			formObj.find(".rowCntPerPage").val("${param.rowCntPerPage}");		 		
		</c:if>
			
		<c:if test="${!empty requestScope.pagingMap.selectPageNo}">			/// 선택한 페이지 번호도 value 값을 남겨줘야함.  hidden 태그 조심! 그 안에 잘못된 결과가 나올 가능성이 농후함.		
			formObj.find(".selectPageNo").val("${requestScope.pagingMap.selectPageNo}");	/// 파라미터값으로 선택한 페이지번호를 넣어주면 이는 보정된 값이 아니기 때문에 (BoardController 속 HashMap 객체 안에 있는 값이 진짜 보정된 값임. selectPageNo 안에 있는 파라미터값은 보정된 값이 아님.)
		</c:if>				

		// class="min_year"  를 가진 태그  입력양식에 "min_year" 이라는 파라미터명에 해당하는 파라미터값을 넣기
		<c:if test="${!empty param.min_year }">			
			formObj.find(".min_year").val("${param.min_year }");		 			
		</c:if>		
		
		// class="min_month"  를 가진 태그  입력양식에  "min_month" 이라는 파라미터명에 해당하는 파라미터값을 넣기
		<c:if test="${!empty param.min_month }">			
		formObj.find(".min_month").val("${param.min_month }");		 			
		</c:if>	
		
		
		// class="max_year"  를 가진 태그  입력양식에 max_year" 이라는 파라미터명에 해당하는 파라미터값을 넣기
		<c:if test="${!empty param.max_year }">			
		
		formObj.find(".max_year").val("${param.max_year }");		 			
		</c:if>	
		
		// class="max_month"  를 가진 태그  입력양식에  "max_month" 이라는 파라미터명에 해당하는 파라미터값을 넣기
		<c:if test="${!empty param.max_month }">			
		formObj.find(".max_month").val("${param.max_month }");		 			
		</c:if>			

			
		
		<c:forEach var="date" items="${paramValues.date}" > 					/// 체크박스는 이름이 여러개, 들어오는 데이터도 여러개. 따라서 items에 1개 이상의 데이터가 배열로 들어감.
			formObj.find(".date").filter("[value='${date}']").prop("checked", true);	/// 반복문이 돌면서 체크박스에 체크된 값이 들어가면 된다..?
		</c:forEach>
					
		})   // body 태그 끝나는 곳

	function goBoardDetailForm( b_no  ){			/// 클릭한 게시판 행의 고유번호가 매개변수로 들어옴.
			
			// location.replace("/BoardDetailForm.do" );			/// 게시판의 상세보기 화면으로 가는 코드   
			// get 방식을 사용하면 location.replace("/BoardDetailForm.do?b_no="+b_no ); 를 해야함. (form 태그 안만들어도 되는 장점이 있음, 대신 pk 값을 url 주소 뒤에 같이 보내게 됨.)
		
			$("[name='boardDetailForm'] [name='b_no']").val(b_no);		/// hidden 태그는 화면에 출력되지 않는다는 보안성이 있어서 신경써야함.
			
			document.boardDetailForm.submit();
			 
		
		}
		
	// 검색 버튼 클릭했을 때 호출되는 함수 선언
	function boardSearch( ){					/// 검색버튼 누르자마자 작동됨.
		
		//--------------------------------------------------------
		// 입력한 키워드 가져와서 변수 keyword1에 저장하기				///  공백이 있는 경우의 유효성 체크를 해줘야함.
		var keyword1= $(".keyword1").val();
	
		// keyword1 변수 안에 문자가 아닌 데이터가 있으면 길이가 없는 문자로 대체하기
		if( typeof(keyword1)!="string" ){	keyword1=""; }					/// 문자가 아닌 경우.. 거의 undefined 일 경우가 많기 때문에 길이 없는 문자데이터 취급하기
		
		// keyword1 변수 안에 문자 앞뒤 공백 제거
		keyword1 = $.trim(keyword1);									/// 	따라서 크로스브라우징 가능한 코딩 사용하는 게 좋음 (JQuery의 장점.. 크로스 브라우징 가능케함.)	
		// 위 코드는 keyword1 = keyword1.trim(); 으로 대체 가능. <주의> String 객체의 메소드는 explorer9 이하의 버전에선 작동  X.  	
		
		// 웹화면 키워드 입력란에 앞뒤 공백 제거한 문자 삽입하기		/// 유저가 실수로 넣은 공백을 프로그램상 컷 해줄 수 있음.
		$(".keyword1").val(keyword1);		
		//--------------------------------------------------------


		
		// name=boardSearchForm 을 가진 form 태그의 action 값 해당한 URL 주소로 웹서버 접속하기		(method="post" action="/boardList.do" + 입력양식 등)
		// 이 때 form 태그 내부의 모든 입력양식의 
		// name 값은 파라미터명, value 값은 파라미터값으로 웹서버로 전송된다.	
		
		document.boardSearchForm.submit( );		/// 웹서버에 URL 주소를 명령하는 입력어 
		
		
		//--------------------------------------------------------
		// 입력한 키워드 가져와서 변수 keyword2에 저장하기	
		var keyword2=$(".keyword2").val();
		
		// keyword2 변수 안에 문자가 아닌 데이터가 있으면 길이가 없는 문자로 대체하기
		if( typeof(keyword2)!="string" ){	keyword2=""; }	
		
		// keyword2 변수 안에 문자 앞뒤 공백 제거
		keyword2 = $.trim(keyword2);	
		
		// 웹화면 키워드 입력란에 앞뒤 공백 제거한 문자 삽입하기
		$(".keyword2").val(keyword2);	
		// 위 코드는 keyword2 = keyword2.trim(); 으로 대체 가능. <주의> String 객체의 메소드는 explorer9 이하의 버전에선 작동  X.  	
		//--------------------------------------------------------

		
		
		
		//--------------------------------------------------------
		// name=boardSearchForm 을 가진 form 태그의 action 값 해당한 URL 주소로 웹서버 접속하기		(method="post" action="/boardList.do" + 입력양식 등)
		// 이 때 form 태그 내부의 모든 입력양식의 
		// name 값은 파라미터명, value 값은 파라미터값으로 웹서버로 전송된다.	
		//--------------------------------------------------------
		document.boardSearchForm.submit( );								/// 웹서버에 URL 주소를 명령하는 입력어  					
		
	}
		
	}
	
	// 모두 검색 버튼 클릭했을 때 호출되는 함수 선언

	function boardSearchAll( ){			/// 모두검색   (키워드를 비우고 들어간다고...?)
		
		// 웹화면 키워드1 입력란에 "" 삽입하기	
		$(".keyword1").val("");
		
		// 웹화면 키워드2 입력란에 "" 삽입하기	
		$(".keyword2").val("");
	

		$(".or_And").val("or");	
		
		// class=boardSearchBtn 가진 태그에 클릭이벤트 발생 시키기	
		$(".boardSearchBtn").click();

		
		// class=boardSearchBtn 가진 태그에 클릭이벤트 발생 시키기	
		$(".boardSearchBtn").click();	/// 모두 검색이라는 것 도 결국 검색버튼을 이용하는 것.
		// 위 코드는 오른쪽 코드로 대체가 가능하다.    document.boardSearchForm.submit( );							/// div 태그를 달아주고 3초뒤에 사라지게 한다.고..? animation fadeout 같은 기교 추가 가능...?

		
		}	
		
	
	
	//**********************************************
	// 함수 pageNoBtn 선언
	//**********************************************	
	function pageNoBtn( pageNo){				
		
		// class=selectPageNo 를 가진 입력양식에 
		// 클릭한 (= 선택한) 페이지 번호를 value 값으로 삽입하기( 서버로 선택한 페이지 번호를 보내기 위해 )	
		$(".selectPageNo").val( pageNo );	
	
	

		// boardSearch( ) 함수  호출하기
		boardSearch( );		/// 페이지 번호 누른 것 = 검색한 것과 마찬가지 (= 함수 boardSearch( ) 실행시켜야함.)
	
	}
	
	// 날짜 범위 관련 select 태그 4개의 유효성 체크하기	
	function checkYMRange( ){
		
		//-----------------------------------------------------------------
		/// 각 입력양식을 관리하는 JQuery 객체의 메위주가 들어가야함.
		var formObj      = $("[name='boardSearchForm']"); 
		var min_yearObj	 = $(".min_year"); 			
		var min_monthObj = $(".min_month"); 		
		var max_yearObj  = $(".max_year"); 
		var max_monthObj = $(".max_month"); 
		
		//-----------------------------------------------------------------
		var  min_yearVal  = min_yearObj.val();
		var  min_monthVal = min_monthObj.val();
		var  max_yearVal  = max_yearObj.val();
		var  max_monthVal = max_monthObj.val();
		
		//-----------------------------------------------------------------		
		
		//-----------------------------------------------------------------		
		/// <1> 년도 없이 월만 들어갈 경우, 값 비워주기
		
		/// <2-2>  년도만 넣었을 때 자동으로 넣어지는 최대년/월이 최소년도보다 크면 멈추기
		/// 이 상황의 사유: 웹브라우저 화면 입력양식에는 01을 넣었지만 자바스크립트에선 01을 넣지 않았기 때문에 ( value 값을 넣지 않음.)
		/// 				따라서 자스에서도 value 값을 넣어줘야함
		
		if(   min_yearVal == "" && min_monthVal != "" ){
			alert("년도가 없으면 월을 선택할 수 없음");
			min_monthObj.val("");
			min_monthVal ="01";
			return;
		}
		
		if(   max_yearVal == "" && max_monthVal != "" ){
			alert("년도가 없으면 월을 선택할 수 없음");
			max_monthObj.val("");
			max_monthVal = "12";
			return;
		}
		//-----------------------------------------------------------------		
		
		//-----------------------------------------------------------------		
		/// <2>  min_yearVal  + min_monthVal 보다 max_yearVal + max_monthVal이 크면 경고를 띄우고 양쪽을 비우게 만들기
	
		if( min_yearVal != ""  &&  min_monthVal != "" &&   max_yearVal != ""  &&  max_monthVal != ""  ){
			if( min_monthVal.length==1 ){ min_monthVal = "0"+ min_monthVal; }
			if( max_monthVal.length==1 ){ max_monthVal = "0"+ max_monthVal; }

				if( min_yearVal + min_monthVal > max_yearVal + max_monthVal){				/// 숫자문자를 어떻게 부등호로 비교함?   --> <주의!!> 숫자문자를 비교할 땐 숫자로 바꾸던가, 길이가 똑같으면 비교가 가능하다. (월의 길이가 다르다면.. 이 소스는 틀립니다.)
					alert("최소 년/월이 최대 년/월보다 크면 안됩니다.");
				
					max_yearObj.val("");
					max_monthObj.val("");
					
					
				}
				return;
			}
		//-----------------------------------------------------------------		
		
		//-----------------------------------------------------------------		
		/// <3> (연도는 있는데 월이 없을 경우) 최소 연도만 넣었을 때 1월을, 최대연도만 넣었을 때 12월을 자동삽입해주기
		
		if( min_yearVal != "" &&  min_monthVal == "" ){ min_monthObj.val("01"); min_monthVal ="01"; }		/// 출력되는  value 값을 주의해서 입력해야한다.
		if( max_yearVal != "" &&  max_monthVal == "" ){ max_monthObj.val("12"); max_monthVal = "12"; }
		//-----------------------------------------------------------------		

		
	}	// 함수 checkYMRange 끝나는 곳
	

	
	
	//-----------------------------------------------------------------		
	/// <4> 날짜 비움버튼으로 날짜 비우기
	function emptyYMRange(){
		
		var formObj      = $("[name='boardSearchForm']"); 
		formObj.find(".min_year").val("");
		formObj.find(".min_month").val("");
		formObj.find(".max_year").val("");
		formObj.find(".max_month").val("");
	
		
	} // 함수 emptyYMRange 끝나는 곳
	
	
	
	//-----------------------------------------------------------------		
	/// <5> 이번달을 누르면 함수 작동되서 날짜의 범위가 맞게 만들기.
	function setYMRange_to_thisYM(  ){

			var todayObj = new Date(); 
			var xxxYear = todayObj.getFullYear();
		    var xxxMonth = todayObj.getMonth()+1;                /// Date 객체는 월을 0~11까지 리턴한다. 그러니까 값을 구할 땐 -1하고 데이터가 나왔을 땐 +1하는 거 잊지 말기.
		    	if( xxxMonth<10 ){ xxxMonth = "0" + xxxMonth; }
		
		    
			var formObj      = $("[name='boardSearchForm']"); 
			formObj.find(".min_year").val(xxxYear); 
			formObj.find(".max_year").val(xxxYear); 
			formObj.find(".min_month").val(xxxMonth); 
			formObj.find(".max_month").val(xxxMonth); 

	   
		} // 함수 setYMRange_to_thisYM 끝나는 곳
		
	//-----------------------------------------------------------------		
	/// <6> 올해 버튼을 누르면 함수 작동되서 날짜의 범위가 맞게 만들기.	
	function setYMRange_to_thisYear(){
			
		var todayObj = new Date(); 
		var xxxYear = todayObj.getFullYear();
	    var xxxMonth = todayObj.getMonth()+1;                /// Date 객체는 월을 0~11까지 리턴한다. 그러니까 값을 구할 땐 -1하고 데이터가 나왔을 땐 +1하는 거 잊지 말기.
	    	if( xxxMonth<10 ){ xxxMonth = "0" + xxxMonth; }
	
	    
		var formObj  = $("[name='boardSearchForm']"); 
		formObj.find(".min_year").val(xxxYear); 
		formObj.find(".max_year").val(xxxYear); 
		formObj.find(".min_month").val("01"); 
		formObj.find(".max_month").val("12"); 

			
			
			
			
		}	// 함수 setYMRange_to_thisYear 끝나는 곳		
		
</script>

</head>
<body>

	<!-- ************************************************************************ -->
	<!--  [게시판 검색 조건 입력 양식] 내포함 form 태그 선언 -->
	<!-- ************************************************************************ -->
	<form name="boardSearchForm" method="post" action="/boardList.do" class="boardSearchForm">		<!--  검색 조건을 가지고 다시 한 번 웹서버에 접속해서 검색화면을 보고싶은 것 (동기방식) -->
	
			<!-- -------------------------------------------- -->			<!--  화면이 깜빡이며 새로운 결과를 보일 경우 = 동기방식. 만약 비동기방식 사용한다면 자스코딩이 많아지지만 간단해진다는 장점이 있음 -->
			<!-- 키워드 데이터 저장할 입력양식 선언-->
			<!-- -------------------------------------------- -->
			[키워드]: 
			<!-- value 에 써넣은 EL태그처럼 파라미터값을 꺼내서 jsp 페이지에 넣으면 키워드가 남는다. -->
	<!-- 
			<input type="text" name="keyword1" class="keyword1" value="${param.keyword1}">			
			
			<select name="or_And">
				<option value="or"  ${ param.or_And=='or'?'selected':''} >or
				<option value="and" ${ param.or_And=='and'?'selected':''}>and
			</select>
			
			 <input type="text" name="keyword2" class="keyword2" value="${param.keyword2}">			
	 -->	
			 <!--  BoardSearchDTO 객체 넣고 바로 mapper_board  로 가면 됨. BoardController 로 갈 필요  X -->
				
				
				
			<input type="text" name="keyword1" class="keyword1" value="">	
			
			<select name="or_And" class="or_And">
				<option value="or"  >or
				<option value="and" >and
			</select>
			
			 <input type="text" name="keyword2" class="keyword2" value="">			
				
				
						 <!-- checkYMRange( )으로 최신 연도 넣어주기, 연도가 없으면 월 못 들어가게하기, min_year 혹은 max_year 중 하나만 나와도 검색 가능하게 하기  -->
			<select name="min_year" class="min_year"  onChange="checkYMRange( )">		<!--  onChange = change 이벤트. 목록을 바꿔 선택하는 것. 마우스/키보드 등 다양하게 이벤트를 일으킬 수 있다.   (따라서 onClick으로 하면 안 됨.) -->
				<option value=""  >
				<option value="2022">2022
				<option value="2021">2021
				<option value="2020">2020
			</select>년				
				<select name="min_month"  class="min_month" onChange="checkYMRange( )">
					<option value="">
					<option value="01">01
					<option value="02">02		
					<option value="03">03		
					<option value="04">04
					<option value="05">05
					<option value="06">06
					<option value="07">07
					<option value="08">08
					<option value="09">09
					<option value="10">10
					<option value="11">11
					<option value="12">12
				</select>월 ~
				
			<select name="max_year"   class="max_year"  onChange="checkYMRange( )">
					<option value="" >
					<option value="2022">2022
					<option value="2021">2021
					<option value="2020">2020
				</select>년
				<select name="max_month"  class="max_month" onChange="checkYMRange( )">
					<option value="">
					<option value="01">01
					<option value="02">02
					<option value="03">03
					<option value="04">04
					<option value="05">05
					<option value="06">06
					<option value="07">07
					<option value="08">08
					<option value="09">09
					<option value="10">10
					<option value="11">11
					<option value="12">12
				</select>월	
			<!-- ------------------------------------------------------------------------------ -->
			<!--  클릭한 페이지번호를 저장할 hidden 입력양식 선언. 페이징 처리 관련 데이터이다. -->
			<!-- ------------------------------------------------------------------------------ -->
			 <input type="hidden" name="selectPageNo" class="selectPageNo" value="1">
			 
			 <!-- ------------------------------------------------------------------------------ -->
			<!--  한 화면에서 보여지는 행의 개수를 저장할 hidden 태그 선언. -->
			<!-- ------------------------------------------------------------------------------ -->
			<!-- <input type="hidden" name="rowCntPerPage" class="rowCntPerPage" value="10">	 -->			<!-- 한 페이지 당 나와야할 페이지 번호,  출력 행의 개수 필요. -->
						 <br>
			 	<!--  행 보기 누르는 것도 일종의 검색버튼 누르기와 같은 것. -->
			 <select name="rowCntPerPage" class="rowCntPerPage" onChange="boardSearch( );">		
			 	<option value="10">10
			 	<option value="15">15
			 	<option value="20">20
			 	<option value="25">25
			 	<option value="30">30
			 </select>행 보기
			
			<!-- ------------------------------------------------------------------------------ -->
			<!--  한 화면에서 보여지는 페이지 번호의 개수를 저장할 hidden 태그 선언. -->
			<!-- ------------------------------------------------------------------------------ -->
			<input type="hidden" name="pageNoCntperPage" class="pageNoCntperPage" value="10">	

			 <div style="height:10px">	  </div>
			  	<input type="button" value=" 검색 " class="boardSearchBtn" onClick="boardSearch()">&nbsp;			<!-- 검색 조건에 맞게 나오면 부모글과 자식글을 구분하기 어렵다는 단점이 있음 -->
			  	<input type="button" value=" 모두검색 " class="boardSearchAllBtn" onClick="boardSearchAll()">&nbsp;
			 <div style="height:10px">	  </div>
	</form>


<div class="searchingResults">


	<table border=0 cellpadding=5 cellspacing=0 style="border-collapse:collapse"  align="center" width="700px">
		<caption>	

			검색결과 : 총 ${ requestScope.boardTotCnt } /  ${ requestScope.boardFullTotCnt } 개
			&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;


	<table border=1 cellpadding=5 style="border-collapse:collapse">
	</caption>
	<span style="cursor:pointer;" class="newRegBtn">[새글쓰기]</span>	
	<tr bgcolor="skyblue">
		<th> 번호 </th>  <th> 제목 </th>  <th> 작성자 </th>   <th> 조회수 </th>  <th> 등록일 </th>
		
			
		
		<%
		
		
		/*
		<% 를 쓰면 이 안에서는 자바 코딩을 사용할 수 있다. 
		 HttpServletRequest 객체의 저장된 게시판 목록을 꺼내서 출력하기
		 
		 List<Map<String, String>> boardList = (  List<Map<String, String>> ) request.getAttribute( "boardList" );			/// HashMap 과 ArrayList의 수입 코딩이 없을 땐 JSP 페이지에서 클래스를 수입해주는 코딩을 적어야한다.
		 																		
		out.println( boardList.size() );	 																
		
		if( boardList!=null ){
			
			out.println("<caption> 총 개수 : " + boardList.size() + "개 </caption>");
			
      // 반복문이 실행되면서 DB에 있는 데이터(게시판 목록)를 각 HashMap 객체 넣는 코딩
			for (int i=0; i<boardList.size(); i++ ){				/// 자바니까 갯수 구하는 메소드가 size다!! length 가 아니다~~!!!
				
				Map<String, String> map = boardList.get(i);
				String b_no = map.get("b_no");
				String subject = map.get("subject");
				String writer = map.get("writer");
				String readcount = map.get("readcount");
				String reg_date = map.get("reg_date");
				
			/// 자바 코딩 중 if문으로 짝/홀수 줄마다 CSS 주는 방법 (가독성을 위해)
			//	if (i%2==1){
			//		out.println( "<tr bgcolor='lightgray'><td>"+ b_no +"<td>" + subject +"<td>" + writer +"<td>" + readcount +"<td>" + reg_date );	 
			//	}
			//	else {
			//		
			//		out.println( "<tr bgcolor='white'><td>"+ b_no +"<td>" + subject +"<td>" + writer +"<td>" + readcount +"<td>" + reg_date );	 
			//	}
			
			// 삼항연산자 사용해서 css 주는 법
				out.println( "<tr bgcolor='"+(i%2==1?"lightgray":"white")+"'><td  &nbsp;&nbsp;&nbsp;&nbsp;>"
			+ b_no +"&nbsp;&nbsp;&nbsp;&nbsp;<td>" + subject +"&nbsp;&nbsp;&nbsp;&nbsp;<td>"
			+ writer +"&nbsp;&nbsp;&nbsp;&nbsp;<td>" + readcount +"&nbsp;&nbsp;&nbsp;&nbsp;<td>" + reg_date );	
			}
		}
		
		
		*/
		%>
		<!-- {requestScope.boardList} 중 boardList는  BoardController의  boardList 와 같은 의미이다.      이 모든 EL, JSTL 코드는 내부적으로 결국 자바코드로 바뀐다.  -->
		<c:forEach var="board" items="${requestScope.boardList}" varStatus="loopTagStatus">   <!--  이 태그가 JSTL 태그. 그 중 c:forEach 가 자바코드 중 반복문임. -->
			<tr bgcolor="${loopTagStatus.index%2==1?'lightgray':'white'}"
				style="cursor:pointer"
				onClick="goBoardDetailForm( ${ board.b_no } )"	
			>		<!-- onclick 자스 코딩 안에 매개변수로 EL태그 삽입. 일련번호 PK를 넣음으로써 각 게시글을 찾으러 들어가는 것 = 일련번호로 찾기 를 할 수 있다.-->
			<td> 	${requestScope.pagingMap.serialNo_desc - loopTagStatus.index} 				</td>		<!-- ($){} 형식으로 쓰는 것이 EL 태그.     (점).뒤에 HashMap 객체의 키값을 넣어준다. -->
			
			<td>
			
				<c:forEach begin="1" end="${ board.print_level }">		
					&nbsp;&nbsp;&nbsp;
				</c:forEach>				
				<c:if test="${ board.print_level>0 }">		
						ㄴ
				</c:if>
				
				${ board.subject }		
				
			</td>
			
			<td>${ board.writer }		</td>
			<td>${ board.readcount }	</td>
			<td>${ board.reg_date }		</td>   
			
	</c:forEach>
	</table>
	</div>	

<!-- 검색된 게시글의 개수가 0개보다 크면, 즉 검색된 게시물이 존재하면  			을 c 코어 태그로 표현함-->
	<c:if test="${requestScope.boardTotCnt>0 }" >			
	
		<!-- [처음] 문자 출력 -->
		<span style="cursor:pointer" onclick="pageNoBtn(1);">[처음]</span>
		
		<!-- [이전] 문자 출력 -->
		<span style="cursor:pointer" onclick="pageNoBtn( ${ requestScope.pagingMap.selectPageNo}-1 );">[이전]</span>				<!-- 이전페이지: 현재 선택한 페이지번호 -1 -->
	
		<!-- 선택한 페이지 번호에 대응하는 페이지 번호 출력 -->
		<c:forEach var="no" begin="${requestScope.pagingMap.begin_pageNo_perPage}" 
							end  ="${requestScope.pagingMap.end_pageNo_perPage}" step="1">		
		
			<!-- 만약에 선택한 페이지번호와 출력되는 페이지번호가 다르면-->
			<c:if test="${ requestScope.pagingMap.selectPageNo!=no}">		
				<span style="cursor:pointer"  onclick="pageNoBtn( ${no});"> [ ${no} ] </span> &nbsp; 			<!--  현재 페이지와 no 번호가 아닌 경우 괄호가 들어간다.  selectPageNo와 no -->
			</c:if>
			
			<!-- 만약에 선택한 페이지번호와 출력되는 페이지번호가 같으면-->
			<c:if test="${ requestScope.pagingMap.selectPageNo==no}">
				<span style="cursor:pointer"  >	${no} </span> &nbsp; 
			</c:if>
		</c:forEach>	
	
		<!-- [다음] 문자 출력 -->
			<span style="cursor:pointer" onclick="pageNoBtn( ${ requestScope.pagingMap.selectPageNo}+1 );">[다음]</span>
		
		<!-- [마지막] 문자 출력 -->
		<span style="cursor:pointer" onclick="pageNoBtn( ${ requestScope.pagingMap.last_pageNo}    );">[마지막]</span>			<!--  가장 마지막 페이지 번호의 값을 가져와야한다. -->
	
		
	</c:if>
		
	
	<form name="boardRegForm" >   <!-- URL 주소인 action 값이 없어도 위에서 줄 수 있음. (document.boardRegForm.action="/boardRegForm.do"; 처럼) -->
	</form>
	

	<form name="boardDetailForm" method="post" action="/boardDetailForm.do">
		<input type="hidden" name="b_no"> 
	</form>

	

</body>
</html>
