<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<!-- ========================================= -->
<!-- mapper 태그 선언하기 -->
<!-- [mapper 태그 안의 namespace값] = [인터페이스 저장 패키지경로]  -->
<!-- ========================================= -->
<mapper namespace="com.naver.erp.BoardDAO">  <!-- xml 파일 안의 내용이 LoginDAO 인터페이스의 내용과 일치해야함 -->


	<select id="getBoardList"  resultType="hashmap">   <!--  select 쿼리에 n행 m열 을 리턴하더라도 resultType 에는 !! 1행의 데이터만 적어줘야함 !!  -->
													   <!--	 각 행의 데이터가 1개의 HashMap 객체 안으로 들어간다.  
															여러 개의 HashMap 객체가 1행을 받아들이도록 해도	결국 안 된다. 모든 저장객체를 String으로 담아야하니까 모든 select 의 결과를 모두 >>>문자화<<< 해줘야함.
														 		
														 		데이터를 가져온 다음 사용해야한다면 억지로 문자화하는 것 보다는
														 		alias를 주는 게 좋음!! (길이가 없는 문자데이터를 붙이면 원본을 훼손한다!!) 
														 		
														 		
														 		
														-->
		select 
				b_no||''			as "b_no"
				, subject			as "subject"
				, writer			as "writer"
				, readcount||''		as "readcount"
				, to_char(reg_date, 'YYYY')|| '-'
			 			|| to_char(reg_date, 'MM')|| '-'
			 			|| to_char(reg_date, 'DD')|| ' ('
			 			|| to_char(reg_date, 'DY', 'NLS_DATE_LANGUAGE=Korean')|| ') '
			 			|| to_char(reg_date, 'AM')||' '
			 			|| to_char(reg_date, 'HH')||':'
			 			|| to_char(reg_date, 'MI')||':'
			 			|| to_char(reg_date, 'SS')
					as "reg_date"
				, print_level||''	as "print_level"		<!-- print_level: 들여쓰기 레벨 번호 -->
				

		from 
		
		board 		<!--  select 의 결과문이 List<Map<String, String>> 자료형에 담김.  -->
		
		 order by group_no desc, print_no asc
		
		
		<!-- 
			~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
			#{mid} 의미
			~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
			#{mid}	=> mid 는 현재 참여하고 있는 HashMap 객체의 키값을 의미한다.
					=> {mid} 는 "mid" 라는 키값에 대응하는 데이터를 리턴하라는 뜻.
					=>   #   는 리턴하는 데이터가 문자면 앞뒤에 ''(싱글쿼트)를 붙이고
												 숫자일 경우엔 ''(싱글쿼트)를 붙일 필요 X   
					    ex)  오라클에서 mid와 pwd의 자료형을 varchar2로 줬으니까!!  싱글쿼트를 붙여야하는 거!!
					    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
					    
			~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
			#{pwd} 의미
			~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
			#{pwd}	=> pwd 는 현재 참여하고 있는 HashMap 객체의 키값을 의미한다.
					=> {pwd} 는 "mid" 라는 키값에 대응하는 데이터를 리턴하라는 뜻.
					=>   #   는 리턴하는 데이터가 문자면 앞뒤에 ''(싱글쿼트)를 붙이고
												 숫자일 경우엔 ''(싱글쿼트)를 붙일 필요 X   
					    ex)  오라클에서 mid와 pwd의 자료형을 varchar2로 줬으니까!!  싱글쿼트를 붙여야하는 거!!
					    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~		    
		 -->
	</select>

	
	
<insert id="insertBoard" parameterType="com.naver.erp.BoardDTO" >

	insert into board(
	
		b_no
		, subject 
		,  writer	
		, readcount
		, content	
		, pwd		
		, email	

		,group_no
		, print_no
		, print_level
	)

	values
	(
		(select nvl(max(b_no),0)+1  from board)
		, #{subject} 			<!--  BoardDTO 객체의 subject 속성변수 안의 값 삽입하기. #이 있으므로 속성변수 안의 값이 문자면 '(싱글쿼트)'를 앞뒤에 붙여준다. -->
		, #{writer}			
		, 0
		, #{content}			
		, #{pwd}			
		, #{email}			
	
		, (select nvl(max(b_no),0)+1  from board)		<!--  group_no = pk 번호 -->
		, 0
		, 0
	)


<!-- 조회수 1 증가하는 ( 즉 수정하는) update 문을 내포한 update 태그 선언-->


<update  id="updateReadCount" parameterType="int">			
<!-- 외부에서 참여하는 데이터가 기본형일 경우 : 패키지명이 아닌 기본 자료형을 써주면 된다.-->
	update
		board
		
	set	
		readcount = readcount+1				
	where 
		b_no=#{b_no}		
<!-- int 형만 참여할 때 단발성 데이터(int, String, double 등 hashmap이나 DTO 객체가 아닐 때) 는 저렇게 (#){ } 코드 작성하면 된다. -->

</update>


<!-- 게시판 1개 글을 검색하는 select 문을 내포한 select 태그 선언-->
<select id="getBoard" parameterType="int"  resultType="com.naver.erp.BoardDTO"> 

	select 
	
		b_no			"b_no"
		, subject 		"subject"
		,  writer		"writer"
		, readcount		"readcount"
		, content		"content"
		, pwd			"pwd"
		, email			"email"

		,group_no		"group_no"
		, print_no		"print_no"
		, print_level	"print_level"
		
	from board
	where 
		b_no=#{b_no}

</select>

<!-- 삭제/수정할 게시판의 존재개수를 리턴하는 select 문을 내포한 select 태그 선언-->
<select id="getBoardCnt" parameterType="int"  resultType="int"> 

	select 
		count(*)
		
	from board
	where 
		b_no=#{b_no}		<!--  외부에서 참여하는 데이터가 뭐인지 잘 생각하고 where절 주기 -->

</select>


<!-- 삭제/수정할 게시판의 비밀번호 개수를 리턴하는 select 문을 내포한 select 태그 선언-->
<select id="getBoardPwdCnt" parameterType="com.naver.erp.BoardDTO"  resultType="int"> 

	select 
	
		count(*)
		
	from board
	where 
		b_no=#{b_no} and  pwd=#{pwd}		

</select>



<!-- 게시판 수정하는 update를 내포하는 update 태그 선언-->
<update id="updateBoard" parameterType="com.naver.erp.BoardDTO" > 		

	update 
	
		board
		
	set						<!--  수정 할 법한 요소들을 update 해주기-->
		subject = #{subject}
		, writer = #{writer}
		, content = #{content}
		, email = #{email}
		
	where 
		b_no=#{b_no}  and  pwd=#{pwd}				<!--  암호 존재개수를 확인하는 코딩이 없더라도 여기서 한 번 더 확인할 수 있는 코딩을 주는 게 좋음 -->

</update>



<!-- 게시판 삭제하는 delete를 내포하는 delete 태그 선언-->
<delete id="deleteboard" parameterType="com.naver.erp.BoardDTO" > 		

	delete 
	
		board
	
	where 
		b_no=#{b_no}  and  pwd=#{pwd}				

</delete>
</mapper>

	


<!-- 삭제될 게시판글의 동생글의 출력 순서번호를 1씩 감소시키는 update를 내포하는 update 태그 선언  -->
<update id="updatePrintNo"  parameterType="com.naver.erp.BoardDTO" > 	
update board set						
		print_no = print_no +1
		
	where 
	
		group_no = ( select group_no from board where b_no = #{b_no} )
		and 
		print_no > ( select print_no from board where b_no = #{b_no} )	


</update>  <!--  수정 할 법한 요소들을 update 해주기-->   	



<!--[후손글의 개수]를 리턴하는 select 를 내포하는 select 태그 선언 -->
<select id="getBoardChildrenCnt" parameterType="com.naver.erp.BoardDTO" resultType="int">		<!--  1행 1열의 데이터를 count 해서 리턴하니까 당연히 int 형의 결과값 --> 

	select count(*)from board
	where 
	
		group_no = ( select group_no from board where b_no=#{b_no} )
		and 
		print_no = ( select print_no +1 from board where b_no=#{b_no} )	
		and 
		print_level = ( select print_level +1 from board where b_no=#{b_no} )
		

</select>					<!--자식 유무 아는 방법. 1. 바로 밑에 있는 게시글의 유무 	(엄마글의 그룹번호 구하는 서브쿼리)
													 2. 출력순서번호는 1개 더 크면 됨.  (엄마글의 출력순서 번호 +1 구하는 서브쿼리)
													 3. 들여쓰기 번호는 1개 더 크면됨.	(엄마글의 들여쓰기 번호 +1 구하는 서브쿼리)
							 이 조건을 만족했을 시에 1을 리턴. 그렇다면 자식이 있다는 의미 -->


<!-- 삭제될 게시판글에 동생글이 있을 경우 삭제처리하며 수정할 제목과 내용 update를 내포하는 update 태그 선언  -->
<update id="updateBoardEmpty"  parameterType="com.naver.erp.BoardDTO" > 	
update board 					
	set					
		subject = '삭제된 게시물입니다.'
		, writer = '삭제된 내용입니다.'
		, content = '삭제된 내용입니다.'
		, email = ''
		, pwd ='zxcv'
		
	where 
		b_no=#{b_no} 

</update>  <!--  수정 할 법한 요소들을 update 해주기-->   	<!--  부모글과 group_no가 같고 print_no 가 높은 글 = 자식글이 있다. -->




<!-- 삭제될 게시판글의 동생글의 출력 순서번호를 1씩 감소시킨 후 수정하는 update 내포하는 update 태그 선언  -->
<update id="updatePrintNoDown"  parameterType="com.naver.erp.BoardDTO" > 	

	update 
			board 					
	set					

			print_no = print_no -1 					<!--  print_no 만 있어야함. print_level 은 있어야할 필요 X -->

	where 
			group_no = (select group_no from board where b_no = #{b_no})	
			and 
			print_no > (select print_no from board where b_no = #{b_no})	
	

</update>  <!--  수정 할 법한 요소들을 update 해주기-->   	
